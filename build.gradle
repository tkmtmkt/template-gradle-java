subprojects {
  defaultTasks 'assemble'

  group = 'com.github.tkmtmkt'
  version = '1.0-SNAPSHOT'

  apply plugin: 'java'
  apply plugin: 'groovy'
  apply plugin: 'checkstyle'
  apply plugin: 'findbugs'
  apply plugin: 'jdepend'
  apply plugin: 'pmd'
  apply plugin: 'jacoco'
  apply plugin: 'eclipse'

  repositories {
    flatDir {
      dirs "$rootDir/lib"
    }
  }

  dependencies {
    compile 'org.slf4j:slf4j-log4j12:1.7.21'
    compile name: 'coherence'
    testCompile 'junit:junit:4.12'
    testCompile 'org.spockframework:spock-core:1.0-groovy-2.4'
    testCompile 'org.mockito:mockito-core:1.10.19'
  }

  def defaultEncoding = 'UTF-8'
  [compileJava, compileTestJava]*.options*.encoding = defaultEncoding
  javadoc {
    options.encoding = defaultEncoding
    options.charSet(defaultEncoding)
  }

  sourceCompatibility = '1.8'
  targetCompatibility = '1.8'

  compileJava {
    options.compilerArgs << '-Xlint:all'
  }

  jar {
    manifest {
      attributes("Implementation-Title": project.name,
                 "Implementation-Version": version)
    }
  }

  checkstyle {
    ignoreFailures = true
    toolVersion = '6.14.1'
    sourceSets = [sourceSets.main]
    configFile = file("$rootDir/config/checkstyle/google_checks.xml")
  }

  findbugs {
    ignoreFailures = true
    toolVersion = '3.0.1'
    sourceSets = [sourceSets.main]
    effort = 'max'
  }

  jdepend {
    ignoreFailures = true
    toolVersion = '2.9.1'
    sourceSets = [sourceSets.main]
  }

  pmd {
    ignoreFailures = true
    toolVersion = '5.4.1'
    sourceSets = [sourceSets.main]
    ruleSets = ['java-basic', 'java-braces', 'java-strings']
  }

  test {
    jacoco.append = false
  }

  jacoco {
    toolVersion = '0.7.6.201602180812'
  }
  jacocoTestReport {
    reports {
      xml.enabled = true
    }
  }

  task console(dependsOn: 'classes', type: JavaExec) {
    description = 'Launch Groovy Console.'
    main = 'groovy.ui.Console'
    classpath = sourceSets.test.runtimeClasspath
  }
}

ext {
  glassFishHome = "${System.properties['user.home']}/apps/glassfish4"
  cmd = System.properties['os.name'].startsWith('Windows') ? 'asadmin.bat' : 'asadmin'
  asadmin = "$glassFishHome/bin/$cmd"
  domain = 'domain1'
}

task startServer(type: Exec) {
  commandLine asadmin, 'start-domain', '--debug=true', domain
}

task stopServer(type: Exec) {
  commandLine asadmin, 'stop-domain', domain
}

task wrapper(type: Wrapper) {
  description = 'Generates Gradle wrapper scripts.'
  gradleVersion = '2.13'
}
